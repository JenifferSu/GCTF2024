Cryto -Warmup Salsa Sauce 

Encrypted flag: fa1c26b66ad926ab75cd51524f05ec08f7f3160c74bec57f8aec3f7cace6fbb7370923e8c540673f657dada9e9540101d7f4dc0b6627f147fc47627a244c88b2ea6c3340
Encrypted text: fa1c26b66ad926ab45cb05575b0ab90fcdf1060d72bfba6f90aa076cbcf2f3aa311a13fc800638382570bcbee142001290f1d41d3761e315b91730663c2cd8e1fe7a25482ce0cd69745028635ef5dae54282f162e448fe
 Looking at the given code, we are provided with both a known plaintext and an encryption function (encText) that uses Salsa20, a symmetric stream cipher. Salsa20 encrypts plaintext by generating a keystream from a key and nonce, and XORing the plaintext with this keystream to produce the ciphertext.
In the encryption process, both the encrypted flag and the encrypted text have the nonce prepended to the ciphertext. Since the nonce is required for the decryption process but is not part of the actual encrypted data, we need to extract the actual ciphertext by skipping the first 8 bytes (which contain the nonce).
 The encryption process is as follows:
ciphertext=plaintext⊕keystream
Since we have both a known plaintext and its corresponding ciphertext, we can derive the keystream using known plaintext attack as follows:
keystream=ciphertext⊕plaintext
To decrypt the flag, we XOR the derived keystream with the encrypted flag:
flag=encrypted flag⊕keystream
Here is the Python code used to perform the decryption:
